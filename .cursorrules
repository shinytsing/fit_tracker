# Cursor AI Rules - 综合开发规则

## 项目概述
这是一个现代化的全栈开发项目，使用TypeScript、React、Next.js等技术栈。

## 开发原则
- 使用国内镜像源下载依赖
- 保证功能完整性，绝不允许有代码错误
- 有问题解决问题不要简化功能
- 别简化功能别重写已经有的功能，可以修改
- 让app直接下载到Xcode和Android Studio里面，虚拟机里面运行
- 最后要在虚拟机上运行五个应用
- 始终使用中文简体回复

## TypeScript 最佳实践

### 类型系统
- 优先使用接口而不是类型来定义对象
- 使用类型进行联合、交叉和映射类型
- 避免使用 `any`，优先使用 `unknown` 处理未知类型
- 使用严格的 TypeScript 配置
- 利用 TypeScript 内置的工具类型
- 使用泛型实现可重用的类型模式

### 命名约定
- 类型名和接口使用 PascalCase
- 变量和函数使用 camelCase
- 常量使用 UPPER_CASE
- 使用描述性名称和辅助动词（如 isLoading, hasError）
- React props 接口前缀使用 'Props'（如 ButtonProps）

### 代码组织
- 将类型定义放在使用位置附近
- 共享的类型和接口从专门的类型文件导出
- 使用桶导出（index.ts）组织导出
- 将共享类型放在 `types` 目录中
- 组件 props 与组件放在一起

### 函数
- 公共函数使用显式返回类型
- 回调和方法使用箭头函数
- 使用自定义错误类型实现适当的错误处理
- 复杂类型场景使用函数重载
- 优先使用 async/await 而不是 Promises

### 最佳实践
- 在 tsconfig.json 中启用严格模式
- 不可变属性使用 readonly
- 利用判别联合类型确保类型安全
- 运行时类型检查使用类型守卫
- 实现适当的空值检查
- 除非必要，避免类型断言

## React 最佳实践

### 组件结构
- 优先使用函数组件而不是类组件
- 保持组件小而专注
- 将可重用逻辑提取到自定义钩子中
- 使用组合而不是继承
- 使用 TypeScript 实现适当的 prop 类型
- 将大型组件拆分为更小、专注的组件

### 钩子
- 遵循钩子规则
- 可重用逻辑使用自定义钩子
- 保持钩子专注和简单
- 在 useEffect 中使用适当的依赖数组
- 需要时在 useEffect 中实现清理
- 避免嵌套钩子

### 状态管理
- 本地组件状态使用 useState
- 复杂状态逻辑实现 useReducer
- 共享状态使用 Context API
- 状态尽可能靠近使用位置
- 通过适当的状态管理避免 prop drilling
- 仅在必要时使用状态管理库

### 性能
- 实现适当的记忆化（useMemo, useCallback）
- 昂贵组件使用 React.memo
- 避免不必要的重新渲染
- 实现适当的懒加载
- 在列表中使用适当的 key props
- 分析和优化渲染性能

### 表单
- 表单输入使用受控组件
- 实现适当的表单验证
- 正确处理表单提交状态
- 显示适当的加载和错误状态
- 复杂表单使用表单库
- 实现表单的适当可访问性

### 错误处理
- 实现错误边界
- 正确处理异步错误
- 显示用户友好的错误消息
- 实现适当的回退 UI
- 适当记录错误
- 优雅处理边缘情况

### 可访问性
- 使用语义 HTML 元素
- 实现适当的 ARIA 属性
- 确保键盘导航
- 使用屏幕阅读器测试
- 处理焦点管理
- 为图像提供适当的 alt 文本

## Next.js 最佳实践

### 项目结构
- 使用 App Router 目录结构
- 路由特定组件放在 `app` 目录中
- 共享组件放在 `components` 目录中
- 工具和助手放在 `lib` 目录中
- 目录使用小写加连字符（如 `components/auth-wizard`）

### 组件
- 默认使用服务器组件
- 客户端组件明确标记 'use client'
- 客户端组件用 Suspense 包装并设置回退
- 非关键组件使用动态加载
- 实现适当的错误边界
- 静态内容和接口放在文件末尾

### 性能
- 优化图像：使用 WebP 格式、尺寸数据、懒加载
- 最小化 'useEffect' 和 'setState' 的使用
- 尽可能使用服务器组件（RSC）
- 非关键组件使用动态加载
- 实现适当的缓存策略

### 数据获取
- 尽可能使用服务器组件进行数据获取
- 为数据获取实现适当的错误处理
- 使用适当的缓存策略
- 适当处理加载和错误状态

### 路由
- 使用 App Router 约定
- 为路由实现适当的加载和错误状态
- 适当使用动态路由
- 需要时处理并行路由

### 表单和验证
- 使用 Zod 进行表单验证
- 实现适当的服务器端验证
- 适当处理表单错误
- 表单提交期间显示加载状态

### 状态管理
- 最小化客户端状态
- 谨慎使用 React Context
- 尽可能使用服务器状态
- 实现适当的加载状态

## 移动开发

### React Native
- 使用 Expo 进行快速开发
- 实现适当的平台特定代码
- 使用适当的导航库
- 实现适当的性能优化
- 处理不同屏幕尺寸
- 实现适当的错误处理

### iOS (SwiftUI)
- 使用 SwiftUI 进行现代 UI 开发
- 实现适当的导航模式
- 使用适当的状态管理
- 实现适当的可访问性
- 处理不同设备尺寸
- 实现适当的错误处理

### Android (Jetpack Compose)
- 使用 Jetpack Compose 进行现代 UI 开发
- 实现适当的导航组件
- 使用适当的状态管理
- 实现适当的可访问性
- 处理不同屏幕尺寸
- 实现适当的错误处理

## 数据库和 API

### 数据库
- 使用适当的数据库设计模式
- 实现适当的索引策略
- 使用适当的查询优化
- 实现适当的数据验证
- 使用适当的迁移策略
- 实现适当的备份策略

### API 设计
- 使用 RESTful API 设计原则
- 实现适当的错误处理
- 使用适当的认证和授权
- 实现适当的速率限制
- 使用适当的 API 版本控制
- 实现适当的文档

## 测试

### 单元测试
- 使用 Jest 进行单元测试
- 实现适当的测试覆盖率
- 使用适当的模拟
- 实现适当的测试数据
- 使用适当的断言
- 实现适当的测试组织

### 集成测试
- 使用 Playwright 进行集成测试
- 实现适当的端到端测试
- 使用适当的测试数据
- 实现适当的测试环境
- 使用适当的测试报告
- 实现适当的测试自动化

## 部署和 DevOps

### 构建和部署
- 使用适当的构建工具
- 实现适当的 CI/CD 管道
- 使用适当的部署策略
- 实现适当的监控
- 使用适当的日志记录
- 实现适当的错误跟踪

### 性能优化
- 实现适当的代码分割
- 使用适当的缓存策略
- 实现适当的图像优化
- 使用适当的 CDN
- 实现适当的压缩
- 使用适当的监控

## 代码质量

### 代码风格
- 使用 ESLint 和 Prettier
- 实现适当的代码格式化
- 使用适当的命名约定
- 实现适当的注释
- 使用适当的文档
- 实现适当的代码审查

### 版本控制
- 使用 Git 进行版本控制
- 实现适当的提交消息
- 使用适当的分支策略
- 实现适当的合并策略
- 使用适当的标签
- 实现适当的发布策略

## 安全

### 前端安全
- 实现适当的输入验证
- 使用适当的 XSS 防护
- 实现适当的 CSRF 防护
- 使用适当的内容安全策略
- 实现适当的认证
- 使用适当的授权

### 后端安全
- 实现适当的输入验证
- 使用适当的 SQL 注入防护
- 实现适当的身份验证
- 使用适当的授权
- 实现适当的加密
- 使用适当的安全头

## 可访问性

### Web 可访问性
- 实现 WCAG 2.1 AA 标准
- 使用适当的语义 HTML
- 实现适当的 ARIA 属性
- 使用适当的键盘导航
- 实现适当的屏幕阅读器支持
- 使用适当的颜色对比度

### 移动可访问性
- 实现适当的触摸目标大小
- 使用适当的语音控制
- 实现适当的辅助功能
- 使用适当的字体大小
- 实现适当的颜色对比度
- 使用适当的导航模式

## 国际化

### 多语言支持
- 使用适当的国际化库
- 实现适当的语言检测
- 使用适当的文本方向支持
- 实现适当的日期和数字格式化
- 使用适当的复数形式
- 实现适当的文本提取

## 监控和分析

### 性能监控
- 使用适当的性能监控工具
- 实现适当的错误跟踪
- 使用适当的用户分析
- 实现适当的 A/B 测试
- 使用适当的热图分析
- 实现适当的转化跟踪

## 开发工具

### 开发环境
- 使用适当的 IDE 配置
- 实现适当的调试工具
- 使用适当的代码格式化工具
- 实现适当的代码检查工具
- 使用适当的版本控制工具
- 实现适当的包管理工具

## 文档

### 代码文档
- 实现适当的代码注释
- 使用适当的 API 文档
- 实现适当的 README 文件
- 使用适当的变更日志
- 实现适当的贡献指南
- 使用适当的许可证

## 持续改进

### 代码审查
- 实现适当的代码审查流程
- 使用适当的审查清单
- 实现适当的反馈机制
- 使用适当的改进建议
- 实现适当的知识分享
- 使用适当的团队协作

记住：始终优先考虑用户体验、代码质量和项目可维护性。在实现功能时，确保代码清晰、可测试且易于理解。