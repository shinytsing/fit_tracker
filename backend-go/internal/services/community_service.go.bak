package services

import (
	"strconv"
	"time"

	"gymates/internal/models"

	"gorm.io/gorm"
)

// CommunityService 社区服务
type CommunityService struct {
	db *gorm.DB
}

// NewCommunityService 创建社区服务
func NewCommunityService(db *gorm.DB) *CommunityService {
	return &CommunityService{
		db: db,
	}
}

// GetFollowingPosts 获取关注流动态
func (s *CommunityService) GetFollowingPosts(userID string, page, limit int, lastPostID string) ([]*models.Post, bool, error) {
	offset := (page - 1) * limit

	var posts []*models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("is_public = ?", true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&posts).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(posts) > limit
	if hasMore {
		posts = posts[:limit]
	}

	return posts, hasMore, nil
}

// GetRecommendPosts 获取推荐动态
func (s *CommunityService) GetRecommendPosts(userID string, page, limit int, lastPostID string) ([]*models.Post, bool, error) {
	offset := (page - 1) * limit

	var posts []*models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("is_public = ?", true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&posts).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(posts) > limit
	if hasMore {
		posts = posts[:limit]
	}

	return posts, hasMore, nil
}

// CreatePost 创建动态
func (s *CommunityService) CreatePost(post *models.Post) (*models.Post, error) {
	// 设置时间戳
	post.CreatedAt = time.Now()
	post.UpdatedAt = time.Now()

	// 插入动态
	if err := s.db.Create(post).Error; err != nil {
		return nil, err
	}

	// 预加载关联数据
	if err := s.db.Preload("User").Preload("Likes").Preload("Comments").First(post, post.ID).Error; err != nil {
		return nil, err
	}

	return post, nil
}

// GetPost 获取动态详情
func (s *CommunityService) GetPost(postID string) (*models.Post, error) {
	var post models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").First(&post, postID).Error
	if err != nil {
		return nil, err
	}
	return &post, nil
}

// GetPostByID 根据ID获取动态
func (s *CommunityService) GetPostByID(postID string) (*models.Post, error) {
	var post models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("id = ?", postID).
		First(&post).Error
	if err != nil {
		return nil, err
	}
	return &post, nil
}

// UpdatePost 更新动态
func (s *CommunityService) UpdatePost(postID string, updates map[string]interface{}) (*models.Post, error) {
	var post models.Post
	err := s.db.Model(&post).Where("id = ?", postID).Updates(updates).Error
	if err != nil {
		return nil, err
	}
	return s.GetPostByID(postID)
}

// DeletePost 删除动态
func (s *CommunityService) DeletePost(postID string) error {
	return s.db.Where("id = ?", postID).Delete(&models.Post{}).Error
}

// LikePost 点赞动态
func (s *CommunityService) LikePost(postID, userID string) error {
	// 转换string到uint
	postIDUint, err := strconv.ParseUint(postID, 10, 32)
	if err != nil {
		return err
	}
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return err
	}

	like := &models.Like{
		UserID: uint(userIDUint),
		PostID: uint(postIDUint),
	}

	return s.db.Create(like).Error
}

// UnlikePost 取消点赞
func (s *CommunityService) UnlikePost(postID, userID string) error {
	return s.db.Where("post_id = ? AND user_id = ?", postID, userID).Delete(&models.Like{}).Error
}

// ToggleLike 切换点赞状态
func (s *CommunityService) ToggleLike(postID, userID string) (bool, error) {
	// 转换string到uint
	postIDUint, err := strconv.ParseUint(postID, 10, 32)
	if err != nil {
		return false, err
	}
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return false, err
	}

	var like models.Like
	err = s.db.Where("post_id = ? AND user_id = ?", uint(postIDUint), uint(userIDUint)).First(&like).Error

	if err == gorm.ErrRecordNotFound {
		// 创建新的点赞
		like = models.Like{
			PostID: uint(postIDUint),
			UserID: uint(userIDUint),
		}
		err = s.db.Create(&like).Error
		if err != nil {
			return false, err
		}
		// 更新动态的点赞数
		s.db.Model(&models.Post{}).Where("id = ?", uint(postIDUint)).UpdateColumn("likes_count", gorm.Expr("likes_count + 1"))
		return true, nil
	} else if err != nil {
		return false, err
	} else {
		// 删除现有点赞
		err = s.db.Delete(&like).Error
		if err != nil {
			return false, err
		}
		// 更新动态的点赞数
		s.db.Model(&models.Post{}).Where("id = ?", uint(postIDUint)).UpdateColumn("likes_count", gorm.Expr("likes_count - 1"))
		return false, nil
	}
}

// CreateComment 创建评论
func (s *CommunityService) CreateComment(postID, userID, content string) (*models.Comment, error) {
	// 转换string到uint
	postIDUint, err := strconv.ParseUint(postID, 10, 32)
	if err != nil {
		return nil, err
	}
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return nil, err
	}

	comment := &models.Comment{
		UserID:  uint(userIDUint),
		PostID:  uint(postIDUint),
		Content: content,
	}

	if err := s.db.Create(comment).Error; err != nil {
		return nil, err
	}

	return comment, nil
}

// GetComments 获取评论列表
func (s *CommunityService) GetComments(postID string, page, limit int) ([]*models.Comment, bool, error) {
	offset := (page - 1) * limit

	var comments []*models.Comment
	err := s.db.Where("post_id = ?", postID).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&comments).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(comments) > limit
	if hasMore {
		comments = comments[:limit]
	}

	return comments, hasMore, nil
}

// GetCommentByID 根据ID获取评论
func (s *CommunityService) GetCommentByID(commentID string) (*models.Comment, error) {
	var comment models.Comment
	err := s.db.Preload("User").Preload("Post").First(&comment, commentID).Error
	if err != nil {
		return nil, err
	}
	return &comment, nil
}

// DeleteComment 删除评论
func (s *CommunityService) DeleteComment(commentID string) error {
	return s.db.Where("id = ?", commentID).Delete(&models.Comment{}).Error
}

// RecordShare 记录分享
func (s *CommunityService) RecordShare(postID, userID string) error {
	// 转换string到uint
	postIDUint, err := strconv.ParseUint(postID, 10, 32)
	if err != nil {
		return err
	}
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return err
	}

	share := &models.Share{
		UserID: uint(userIDUint),
		PostID: uint(postIDUint),
	}

	return s.db.Create(share).Error
}

// ToggleFollow 切换关注状态
func (s *CommunityService) ToggleFollow(userID, targetUserID string) (bool, error) {
	// 转换string到uint
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return false, err
	}
	targetUserIDUint, err := strconv.ParseUint(targetUserID, 10, 32)
	if err != nil {
		return false, err
	}

	var follow models.Follow
	err = s.db.Where("follower_id = ? AND following_id = ?", uint(userIDUint), uint(targetUserIDUint)).First(&follow).Error

	if err == gorm.ErrRecordNotFound {
		// 创建新的关注
		follow = models.Follow{
			FollowerID:  uint(userIDUint),
			FollowingID: uint(targetUserIDUint),
		}
		err = s.db.Create(&follow).Error
		if err != nil {
			return false, err
		}
		return true, nil
	} else if err != nil {
		return false, err
	} else {
		// 删除现有关注
		err = s.db.Delete(&follow).Error
		if err != nil {
			return false, err
		}
		return false, nil
	}
}

// GetUserProfile 获取用户资料
func (s *CommunityService) GetUserProfile(userID string) (*models.User, error) {
	var user models.User
	err := s.db.First(&user, userID).Error
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// GetUserPosts 获取用户动态
func (s *CommunityService) GetUserPosts(userID string, page, limit int) ([]*models.Post, bool, error) {
	offset := (page - 1) * limit

	var posts []*models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("user_id = ? AND is_public = ?", userID, true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&posts).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(posts) > limit
	if hasMore {
		posts = posts[:limit]
	}

	return posts, hasMore, nil
}

// GetHotTopics 获取热门话题
func (s *CommunityService) GetHotTopics(limit int) ([]string, error) {
	return s.GetTrendingTopics(limit)
}

// GetTopicPosts 获取话题动态
func (s *CommunityService) GetTopicPosts(topic string, page, limit int) ([]*models.Post, bool, error) {
	offset := (page - 1) * limit

	var posts []*models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("tags LIKE ? AND is_public = ?", "%"+topic+"%", true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&posts).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(posts) > limit
	if hasMore {
		posts = posts[:limit]
	}

	return posts, hasMore, nil
}

// Search 搜索
func (s *CommunityService) Search(query string, page, limit int) ([]*models.Post, bool, error) {
	return s.SearchPosts(query, page, limit)
}

// GetChallenges 获取挑战列表
func (s *CommunityService) GetChallenges(page, limit int) ([]*models.Challenge, bool, error) {
	offset := (page - 1) * limit

	var challenges []*models.Challenge
	err := s.db.Where("is_active = ?", true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&challenges).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(challenges) > limit
	if hasMore {
		challenges = challenges[:limit]
	}

	return challenges, hasMore, nil
}

// GetChallengeByID 根据ID获取挑战
func (s *CommunityService) GetChallengeByID(challengeID string) (*models.Challenge, error) {
	var challenge models.Challenge
	err := s.db.First(&challenge, challengeID).Error
	if err != nil {
		return nil, err
	}
	return &challenge, nil
}

// JoinChallenge 参与挑战
func (s *CommunityService) JoinChallenge(challengeID, userID string) error {
	// 转换string到uint
	challengeIDUint, err := strconv.ParseUint(challengeID, 10, 32)
	if err != nil {
		return err
	}
	userIDUint, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return err
	}

	participant := &models.ChallengeParticipant{
		UserID:      uint(userIDUint),
		ChallengeID: uint(challengeIDUint),
		Status:      "active",
		JoinedAt:    time.Now(),
	}

	return s.db.Create(participant).Error
}

// ReportPost 举报动态
func (s *CommunityService) ReportPost(postID, userID, reason string) error {
	// 这里应该实现举报逻辑
	// 可以创建一个 Report 模型来存储举报信息
	return nil
}

// BlockUser 屏蔽用户
func (s *CommunityService) BlockUser(userID, targetUserID string) error {
	// 这里可以实现屏蔽用户的逻辑
	// 暂时返回 nil 表示成功
	return nil
}

// GetTrendingTopics 获取热门话题
func (s *CommunityService) GetTrendingTopics(limit int) ([]string, error) {
	// 模拟热门话题
	topics := []string{
		"健身打卡",
		"减脂计划",
		"增肌训练",
		"瑜伽练习",
		"跑步训练",
		"力量训练",
		"有氧运动",
		"健康饮食",
	}

	if limit > len(topics) {
		limit = len(topics)
	}

	return topics[:limit], nil
}

// FollowUser 关注用户
func (s *CommunityService) FollowUser(userID, targetUserID string) error {
	// 这里应该实现关注逻辑
	return nil
}

// UnfollowUser 取消关注
func (s *CommunityService) UnfollowUser(userID, targetUserID string) error {
	// 这里应该实现取消关注逻辑
	return nil
}

// SearchPosts 搜索动态
func (s *CommunityService) SearchPosts(query string, page, limit int) ([]*models.Post, bool, error) {
	offset := (page - 1) * limit

	var posts []*models.Post
	err := s.db.Preload("User").Preload("Likes").Preload("Comments").
		Where("content LIKE ? AND is_public = ?", "%"+query+"%", true).
		Order("created_at DESC").
		Offset(offset).
		Limit(limit + 1).
		Find(&posts).Error

	if err != nil {
		return nil, false, err
	}

	hasMore := len(posts) > limit
	if hasMore {
		posts = posts[:limit]
	}

	return posts, hasMore, nil
}
