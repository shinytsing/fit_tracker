package services

import (
	"context"
	"errors"
	"fmt"
	"time"

	"gymates/internal/models"

	"github.com/go-redis/redis/v8"
	"gorm.io/gorm"
)

type PostService struct {
	db    *gorm.DB
	redis *redis.Client
}

func NewPostService(db *gorm.DB, redis *redis.Client) *PostService {
	return &PostService{
		db:    db,
		redis: redis,
	}
}

// CreatePost 创建动态
func (s *PostService) CreatePost(post *models.Post) error {
	if err := s.db.Create(post).Error; err != nil {
		return fmt.Errorf("failed to create post: %w", err)
	}

	// 预加载用户信息
	if err := s.db.Preload("User").First(post, post.ID).Error; err != nil {
		return fmt.Errorf("failed to load post with user: %w", err)
	}

	// 缓存动态
	s.cachePost(post)

	return nil
}

// GetPosts 获取动态列表
func (s *PostService) GetPosts(userID *uint, page, limit int) ([]models.Post, int64, error) {
	var posts []models.Post
	var total int64

	offset := (page - 1) * limit
	query := s.db.Model(&models.Post{})

	// 如果指定了用户ID，只获取该用户的动态
	if userID != nil {
		query = query.Where("user_id = ?", *userID)
	}

	// 只获取公开的动态
	query = query.Where("is_public = ?", true)

	// 获取总数
	if err := query.Count(&total).Error; err != nil {
		return nil, 0, fmt.Errorf("failed to count posts: %w", err)
	}

	// 获取动态列表
	if err := query.Preload("User").
		Preload("Likes").
		Preload("Comments").
		Order("created_at DESC").
		Offset(offset).
		Limit(limit).
		Find(&posts).Error; err != nil {
		return nil, 0, fmt.Errorf("failed to get posts: %w", err)
	}

	return posts, total, nil
}

// GetPostByID 根据ID获取动态
func (s *PostService) GetPostByID(id uint) (*models.Post, error) {
	var post models.Post

	// 先尝试从缓存获取
	if cachedPost := s.getCachedPost(id); cachedPost != nil {
		return cachedPost, nil
	}

	// 从数据库查询
	if err := s.db.Preload("User").
		Preload("Likes").
		Preload("Comments").
		Preload("Comments.User").
		First(&post, id).Error; err != nil {
		return nil, fmt.Errorf("post not found: %w", err)
	}

	// 缓存动态
	s.cachePost(&post)

	return &post, nil
}

// UpdatePost 更新动态
func (s *PostService) UpdatePost(id, userID uint, updates interface{}) (*models.Post, error) {
	var post models.Post
	if err := s.db.Where("id = ? AND user_id = ?", id, userID).First(&post).Error; err != nil {
		return nil, fmt.Errorf("post not found or unauthorized: %w", err)
	}

	if err := s.db.Model(&post).Updates(updates).Error; err != nil {
		return nil, fmt.Errorf("failed to update post: %w", err)
	}

	// 更新缓存
	s.cachePost(&post)

	return &post, nil
}

// DeletePost 删除动态
func (s *PostService) DeletePost(id, userID uint) error {
	var post models.Post
	if err := s.db.Where("id = ? AND user_id = ?", id, userID).First(&post).Error; err != nil {
		return fmt.Errorf("post not found or unauthorized: %w", err)
	}

	if err := s.db.Delete(&post).Error; err != nil {
		return fmt.Errorf("failed to delete post: %w", err)
	}

	// 删除缓存
	s.invalidatePostCache(fmt.Sprintf("%%d", id))

	return nil
}

// LikePost 点赞动态
func (s *PostService) LikePost(postID, userID uint) error {
	// 检查是否已经点赞
	var like models.PostLike
	if err := s.db.Where("user_id = ? AND post_id = ?", userID, postID).First(&like).Error; err == nil {
		return errors.New("already liked this post")
	}

	// 创建点赞记录
	like = models.PostLike{
		UserID: fmt.Sprintf("%d", userID),
		PostID: fmt.Sprintf("%d", postID),
	}

	if err := s.db.Create(&like).Error; err != nil {
		return fmt.Errorf("failed to like post: %w", err)
	}

	// 更新缓存
	s.invalidatePostCache(fmt.Sprintf("%%d", postID))

	return nil
}

// UnlikePost 取消点赞动态
func (s *PostService) UnlikePost(postID, userID uint) error {
	if err := s.db.Where("user_id = ? AND post_id = ?", userID, postID).Delete(&models.PostLike{}).Error; err != nil {
		return fmt.Errorf("failed to unlike post: %w", err)
	}

	// 更新缓存
	s.invalidatePostCache(fmt.Sprintf("%%d", postID))

	return nil
}

// CreateComment 创建评论
func (s *PostService) CreateComment(comment *models.PostComment) error {
	if err := s.db.Create(comment).Error; err != nil {
		return fmt.Errorf("failed to create comment: %w", err)
	}

	// 预加载用户信息
	if err := s.db.Preload("User").First(comment, comment.ID).Error; err != nil {
		return fmt.Errorf("failed to load comment with user: %w", err)
	}

	// 更新动态缓存
	s.invalidatePostCache(comment.PostID)

	return nil
}

// GetComments 获取评论列表
func (s *PostService) GetComments(postID uint, page, limit int) ([]models.PostComment, int64, error) {
	var comments []models.PostComment
	var total int64

	offset := (page - 1) * limit

	// 获取总数
	if err := s.db.Model(&models.PostComment{}).Where("post_id = ? AND parent_id IS NULL", postID).Count(&total).Error; err != nil {
		return nil, 0, fmt.Errorf("failed to count comments: %w", err)
	}

	// 获取评论列表（只获取顶级评论）
	if err := s.db.Where("post_id = ? AND parent_id IS NULL", postID).
		Preload("User").
		Preload("Replies").
		Preload("Replies.User").
		Order("created_at ASC").
		Offset(offset).
		Limit(limit).
		Find(&comments).Error; err != nil {
		return nil, 0, fmt.Errorf("failed to get comments: %w", err)
	}

	return comments, total, nil
}

// DeleteComment 删除评论
func (s *PostService) DeleteComment(id, userID uint) error {
	var comment models.PostComment
	if err := s.db.Where("id = ? AND user_id = ?", id, userID).First(&comment).Error; err != nil {
		return fmt.Errorf("comment not found or unauthorized: %w", err)
	}

	if err := s.db.Delete(&comment).Error; err != nil {
		return fmt.Errorf("failed to delete comment: %w", err)
	}

	// 更新动态缓存
	s.invalidatePostCache(comment.PostID)

	return nil
}

// 缓存相关方法
func (s *PostService) cachePost(post *models.Post) {
	ctx := context.Background()
	key := fmt.Sprintf("post:%d", post.ID)

	postData := map[string]interface{}{
		"id":           post.ID,
		"user_id":      post.UserID,
		"content":      post.Content,
		"images":       post.Images,
		"video_url":    post.VideoURL,
		"location":     post.Location,
		"type":         post.Type,
		"like_count":   post.LikeCount,
		"comment_count": post.CommentCount,
		"created_at":   post.CreatedAt,
		"updated_at":   post.UpdatedAt,
	}

	s.redis.HMSet(ctx, key, postData)
	s.redis.Expire(ctx, key, time.Hour)
}

func (s *PostService) getCachedPost(id uint) *models.Post {
	ctx := context.Background()
	key := fmt.Sprintf("post:%d", id)

	if postData := s.redis.HGetAll(ctx, key).Val(); len(postData) > 0 {
		// 这里需要将map转换为Post结构体
		// 为了简化，这里返回nil，实际实现中需要完整的转换逻辑
		return nil
	}

	return nil
}

func (s *PostService) invalidatePostCache(postID string) {
	ctx := context.Background()
	key := fmt.Sprintf("post:%s", postID)
	s.redis.Del(ctx, key)
}
