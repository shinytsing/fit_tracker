name: FitTracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Go 后端测试
  go-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fittracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd backend-go
        go mod download
        go mod verify
    
    - name: Run Go tests
      run: |
        cd backend-go
        go test ./... -v -race -coverprofile=coverage.out
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/fittracker_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
        JWT_EXPIRATION: 24
        ENVIRONMENT: test
    
    - name: Run integration tests
      run: |
        cd backend-go
        go test ./... -v -race -tags=integration -coverprofile=integration_coverage.out
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/fittracker_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
        JWT_EXPIRATION: 24
        ENVIRONMENT: test
    
    - name: Generate coverage report
      run: |
        cd backend-go
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -html=integration_coverage.out -o integration_coverage.html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: go-coverage-reports
        path: |
          backend-go/coverage.html
          backend-go/integration_coverage.html
    
    - name: Run benchmarks
      run: |
        cd backend-go
        go test -bench=. -benchmem -run=^$ ./...
    
    - name: Run race detector
      run: |
        cd backend-go
        go test -race -count=100 ./...

  # Flutter 前端测试
  flutter-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          frontend/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install dependencies
      run: |
        cd frontend
        flutter pub get
    
    - name: Run code generation
      run: |
        cd frontend
        flutter pub run build_runner build --delete-conflicting-outputs
    
    - name: Run Flutter tests
      run: |
        cd frontend
        flutter test --coverage
    
    - name: Run integration tests
      run: |
        cd frontend
        flutter test integration_test/ --coverage
    
    - name: Upload Flutter coverage
      uses: actions/upload-artifact@v3
      with:
        name: flutter-coverage-reports
        path: frontend/coverage/
    
    - name: Analyze Flutter code
      run: |
        cd frontend
        flutter analyze

  # Docker 测试
  docker-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.test.yml build
    
    - name: Run Docker tests
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        docker-compose -f docker-compose.test.yml exec backend-go go test ./... -v
        docker-compose -f docker-compose.test.yml down
    
    - name: Test Docker health
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        curl -f http://localhost:8080/health || exit 1
        docker-compose -f docker-compose.test.yml down

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Go security scan
      run: |
        cd backend-go
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...
    
    - name: Run Flutter security scan
      run: |
        cd frontend
        flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name' | xargs -I {} flutter pub deps --json | jq '.packages[] | select(.name == "{}") | .version'

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fittracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        cd backend-go
        go mod download
    
    - name: Run performance tests
      run: |
        cd backend-go
        go test -bench=. -benchmem -run=^$ ./...
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/fittracker_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
        JWT_EXPIRATION: 24
        ENVIRONMENT: test
    
    - name: Run load tests
      run: |
        cd backend-go
        go test -race -count=1000 ./...

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Go linter
      run: |
        cd backend-go
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Run Flutter linter
      run: |
        cd frontend
        flutter analyze
    
    - name: Check code formatting
      run: |
        cd backend-go
        go fmt ./...
        git diff --exit-code
        cd ../frontend
        flutter format --set-exit-if-changed .

  # 部署测试
  deployment-test:
    runs-on: ubuntu-latest
    needs: [go-tests, flutter-tests, docker-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production images
      run: |
        docker-compose -f docker-compose.prod.yml build
    
    - name: Test production deployment
      run: |
        docker-compose -f docker-compose.prod.yml up -d
        sleep 60
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:3000 || exit 1
        docker-compose -f docker-compose.prod.yml down

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [go-tests, flutter-tests, docker-tests, security-scan, performance-tests, code-quality, deployment-test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.go-tests.result == 'success' && needs.flutter-tests.result == 'success' && needs.docker-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
    
    - name: Notify failure
      if: ${{ needs.go-tests.result == 'failure' || needs.flutter-tests.result == 'failure' || needs.docker-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1
