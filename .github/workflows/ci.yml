name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  FLUTTER_VERSION: '3.16.0'
  POSTGRES_PASSWORD: fittracker123
  REDIS_PASSWORD: fittracker123

jobs:
  # 后端 Go 测试
  backend-test:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: fittracker_test
          POSTGRES_USER: fittracker
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./backend-go
      run: go mod download

    - name: Run Go tests with coverage
      working-directory: ./backend-go
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fittracker
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        DB_NAME: fittracker_test
        DB_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${{ env.REDIS_PASSWORD }}
        REDIS_DB: 0
        JWT_SECRET: test_jwt_secret_key
        JWT_EXPIRE_HOURS: 24
      run: |
        go test ./... -coverprofile=coverage.out -covermode=atomic -v

    - name: Generate Go coverage report
      working-directory: ./backend-go
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Upload Go coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: go-coverage-report
        path: |
          backend-go/coverage.out
          backend-go/coverage.html

  # 前端 Flutter 测试
  frontend-test:
    name: Frontend Tests (Flutter)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          **/.packages
          **/pubspec.lock
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install Flutter dependencies
      working-directory: ./frontend
      run: flutter pub get

    - name: Verify Flutter installation
      run: flutter doctor -v

    - name: Run Flutter tests with coverage
      working-directory: ./frontend
      run: |
        flutter test --coverage --reporter=expanded

    - name: Generate Flutter coverage report
      working-directory: ./frontend
      run: |
        # 安装 lcov 用于生成 HTML 报告
        sudo apt-get update
        sudo apt-get install -y lcov
        # 生成 HTML 覆盖率报告
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload Flutter coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: flutter-coverage-report
        path: |
          frontend/coverage/lcov.info
          frontend/coverage/html/

  # 集成测试 - 使用 Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      run: |
        # 启动数据库和缓存服务
        docker-compose up -d postgres redis
        
        # 等待服务启动
        sleep 30
        
        # 检查服务状态
        docker-compose ps

    - name: Run backend integration tests
      working-directory: ./backend-go
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: fittracker
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        DB_NAME: fittracker
        DB_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${{ env.REDIS_PASSWORD }}
        REDIS_DB: 0
        JWT_SECRET: test_jwt_secret_key
        JWT_EXPIRE_HOURS: 24
      run: |
        # 运行集成测试
        go test -tags=integration ./...

    - name: Clean up services
      if: always()
      run: |
        docker-compose down -v

  # 代码质量检查
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Run Go linting
      working-directory: ./backend-go
      run: |
        # 安装 golangci-lint
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        golangci-lint run

    - name: Run Flutter linting
      working-directory: ./frontend
      run: |
        flutter pub get
        flutter analyze

    - name: Format check (Go)
      working-directory: ./backend-go
      run: |
        go fmt ./...

    - name: Format check (Flutter)
      working-directory: ./frontend
      run: |
        dart format --set-exit-if-changed .

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 构建验证
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-go
        push: false
        tags: fittracker-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: fittracker-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker images
      run: |
        # 测试后端镜像
        docker run --rm fittracker-backend:test --version || echo "Backend image built successfully"
        
        # 测试前端镜像
        docker run --rm fittracker-frontend:test --version || echo "Frontend image built successfully"

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test, code-quality, security-scan, build-verification]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.integration-test.result == 'success' && needs.code-quality.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "📊 Coverage reports are available in the artifacts section"

    - name: Notify failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.integration-test.result == 'failure' || needs.code-quality.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed. Please check the logs above."
        exit 1