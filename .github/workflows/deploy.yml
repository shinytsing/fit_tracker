name: Deploy - Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: fittracker-backend
  IMAGE_NAME_FRONTEND: fittracker-frontend
  GO_VERSION: '1.21'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # 构建和推送 Docker 镜像
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-go
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          FLUTTER_VERSION=${{ env.FLUTTER_VERSION }}

    - name: Generate deployment manifest
      run: |
        cat > deployment-manifest.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "images": {
            "backend": "${{ steps.meta-backend.outputs.tags }}",
            "frontend": "${{ steps.meta-frontend.outputs.tags }}"
          },
          "registry": "${{ env.REGISTRY }}",
          "namespace": "${{ github.repository_owner }}"
        }
        EOF

    - name: Upload deployment manifest
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifest
        path: deployment-manifest.json

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment manifest
      uses: actions/download-artifact@v3
      with:
        name: deployment-manifest

    - name: Deploy to production server
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📦 Backend image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
        echo "📦 Frontend image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
        
        # 这里可以添加实际的部署脚本
        # 例如：SSH 到服务器，拉取镜像，重启服务等
        echo "✅ Deployment completed successfully!"

    - name: Health check
      run: |
        echo "🔍 Performing health checks..."
        # 这里可以添加健康检查脚本
        # 例如：检查服务是否正常运行
        echo "✅ All services are healthy!"

  # 部署到预发布环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment manifest
      uses: actions/download-artifact@v3
      with:
        name: deployment-manifest

    - name: Deploy to staging server
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Backend image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}"
        echo "📦 Frontend image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}"
        
        # 这里可以添加实际的部署脚本
        echo "✅ Staging deployment completed successfully!"

  # 清理旧镜像
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME_BACKEND }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'

    - name: Delete old frontend images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME_FRONTEND }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'

  # 通知部署结果
  notify-deployment:
    name: Notify Deployment Results
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production, deploy-staging]
    if: always()

    steps:
    - name: Notify deployment success
      if: ${{ needs.build-and-push.result == 'success' && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success') }}
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📦 Images pushed to: ${{ env.REGISTRY }}/${{ github.repository_owner }}"
        echo "🔗 View packages: https://github.com/${{ github.repository }}/packages"

    - name: Notify deployment failure
      if: ${{ needs.build-and-push.result == 'failure' || needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      run: |
        echo "❌ Deployment failed. Please check the logs above."
        exit 1
