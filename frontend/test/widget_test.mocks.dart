// Mocks generated by Mockito 5.4.4 from annotations
// in fittracker/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fittracker/core/models/models.dart' as _i2;
import 'package:fittracker/core/services/api_services.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResponse_0 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i2.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_2<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkout_3 extends _i1.SmartFake implements _i2.Workout {
  _FakeWorkout_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBMICalculation_4 extends _i1.SmartFake
    implements _i2.BMICalculation {
  _FakeBMICalculation_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePost_5 extends _i1.SmartFake implements _i2.Post {
  _FakePost_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckin_6 extends _i1.SmartFake implements _i2.Checkin {
  _FakeCheckin_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNutritionRecord_7 extends _i1.SmartFake
    implements _i2.NutritionRecord {
  _FakeNutritionRecord_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApiService extends _i1.Mock implements _i3.AuthApiService {
  MockAuthApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthResponse> register({
    required String? username,
    required String? email,
    required String? password,
    String? firstName,
    String? lastName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #username: username,
            #email: email,
            #password: password,
            #firstName: firstName,
            #lastName: lastName,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_0(
          this,
          Invocation.method(
            #register,
            [],
            {
              #username: username,
              #email: email,
              #password: password,
              #firstName: firstName,
              #lastName: lastName,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<_i2.AuthResponse> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_0(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AuthResponse> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_0(
          this,
          Invocation.method(
            #refreshToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<_i2.User> getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> updateProfile({
    String? firstName,
    String? lastName,
    String? bio,
    String? avatar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #bio: bio,
            #avatar: avatar,
          },
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #updateProfile,
            [],
            {
              #firstName: firstName,
              #lastName: lastName,
              #bio: bio,
              #avatar: avatar,
            },
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<Map<String, dynamic>> getUserStats() => (super.noSuchMethod(
        Invocation.method(
          #getUserStats,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [WorkoutApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutApiService extends _i1.Mock implements _i3.WorkoutApiService {
  MockWorkoutApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.Workout>>> getWorkouts({
    int? page = 1,
    int? limit = 10,
    String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkouts,
          [],
          {
            #page: page,
            #limit: limit,
            #type: type,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<List<_i2.Workout>>>.value(
            _FakeApiResponse_2<List<_i2.Workout>>(
          this,
          Invocation.method(
            #getWorkouts,
            [],
            {
              #page: page,
              #limit: limit,
              #type: type,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.Workout>>>);

  @override
  _i4.Future<_i2.Workout> createWorkout({
    required String? name,
    required String? type,
    int? planId,
    int? duration = 0,
    int? calories = 0,
    String? difficulty = r'',
    String? notes,
    double? rating = 0.0,
    List<Map<String, dynamic>>? exercises,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWorkout,
          [],
          {
            #name: name,
            #type: type,
            #planId: planId,
            #duration: duration,
            #calories: calories,
            #difficulty: difficulty,
            #notes: notes,
            #rating: rating,
            #exercises: exercises,
          },
        ),
        returnValue: _i4.Future<_i2.Workout>.value(_FakeWorkout_3(
          this,
          Invocation.method(
            #createWorkout,
            [],
            {
              #name: name,
              #type: type,
              #planId: planId,
              #duration: duration,
              #calories: calories,
              #difficulty: difficulty,
              #notes: notes,
              #rating: rating,
              #exercises: exercises,
            },
          ),
        )),
      ) as _i4.Future<_i2.Workout>);

  @override
  _i4.Future<_i2.Workout> getWorkout(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getWorkout,
          [id],
        ),
        returnValue: _i4.Future<_i2.Workout>.value(_FakeWorkout_3(
          this,
          Invocation.method(
            #getWorkout,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Workout>);

  @override
  _i4.Future<_i2.Workout> updateWorkout(
    int? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWorkout,
          [
            id,
            data,
          ],
        ),
        returnValue: _i4.Future<_i2.Workout>.value(_FakeWorkout_3(
          this,
          Invocation.method(
            #updateWorkout,
            [
              id,
              data,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Workout>);

  @override
  _i4.Future<void> deleteWorkout(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteWorkout,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.TrainingPlan>>> getTrainingPlans({
    int? page = 1,
    int? limit = 10,
    String? difficulty,
    String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrainingPlans,
          [],
          {
            #page: page,
            #limit: limit,
            #difficulty: difficulty,
            #type: type,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<List<_i2.TrainingPlan>>>.value(
            _FakeApiResponse_2<List<_i2.TrainingPlan>>(
          this,
          Invocation.method(
            #getTrainingPlans,
            [],
            {
              #page: page,
              #limit: limit,
              #difficulty: difficulty,
              #type: type,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.TrainingPlan>>>);

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.Exercise>>> getExercises({
    int? page = 1,
    int? limit = 20,
    String? category,
    String? difficulty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExercises,
          [],
          {
            #page: page,
            #limit: limit,
            #category: category,
            #difficulty: difficulty,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<List<_i2.Exercise>>>.value(
            _FakeApiResponse_2<List<_i2.Exercise>>(
          this,
          Invocation.method(
            #getExercises,
            [],
            {
              #page: page,
              #limit: limit,
              #category: category,
              #difficulty: difficulty,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.Exercise>>>);

  @override
  _i4.Future<_i2.BMICalculation> calculateBMI({
    required double? height,
    required double? weight,
    required int? age,
    required String? gender,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBMI,
          [],
          {
            #height: height,
            #weight: weight,
            #age: age,
            #gender: gender,
          },
        ),
        returnValue: _i4.Future<_i2.BMICalculation>.value(_FakeBMICalculation_4(
          this,
          Invocation.method(
            #calculateBMI,
            [],
            {
              #height: height,
              #weight: weight,
              #age: age,
              #gender: gender,
            },
          ),
        )),
      ) as _i4.Future<_i2.BMICalculation>);

  @override
  _i4.Future<Map<String, dynamic>> createBMIRecord({
    required double? height,
    required double? weight,
    required int? age,
    required String? gender,
    String? notes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBMIRecord,
          [],
          {
            #height: height,
            #weight: weight,
            #age: age,
            #gender: gender,
            #notes: notes,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getBMIRecords() => (super.noSuchMethod(
        Invocation.method(
          #getBMIRecords,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [CommunityApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommunityApiService extends _i1.Mock
    implements _i3.CommunityApiService {
  MockCommunityApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.Post>>> getPosts({
    int? page = 1,
    int? limit = 10,
    String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
          {
            #page: page,
            #limit: limit,
            #type: type,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<List<_i2.Post>>>.value(
            _FakeApiResponse_2<List<_i2.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
            {
              #page: page,
              #limit: limit,
              #type: type,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.Post>>>);

  @override
  _i4.Future<_i2.Post> createPost({
    required String? content,
    List<String>? images,
    String? type,
    bool? isPublic = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [],
          {
            #content: content,
            #images: images,
            #type: type,
            #isPublic: isPublic,
          },
        ),
        returnValue: _i4.Future<_i2.Post>.value(_FakePost_5(
          this,
          Invocation.method(
            #createPost,
            [],
            {
              #content: content,
              #images: images,
              #type: type,
              #isPublic: isPublic,
            },
          ),
        )),
      ) as _i4.Future<_i2.Post>);

  @override
  _i4.Future<_i2.Post> getPost(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPost,
          [id],
        ),
        returnValue: _i4.Future<_i2.Post>.value(_FakePost_5(
          this,
          Invocation.method(
            #getPost,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Post>);

  @override
  _i4.Future<void> likePost(int? id) => (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikePost(int? id) => (super.noSuchMethod(
        Invocation.method(
          #unlikePost,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> createComment(
    int? postId,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createComment,
          [
            postId,
            content,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.ApiResponse<List<Map<String, dynamic>>>> getComments(
    int? postId, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [postId],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<_i2.ApiResponse<List<Map<String, dynamic>>>>.value(
                _FakeApiResponse_2<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #getComments,
            [postId],
            {
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<Map<String, dynamic>>>>);

  @override
  _i4.Future<void> followUser(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #followUser,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unfollowUser(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #unfollowUser,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.Challenge>>> getChallenges({
    int? page = 1,
    int? limit = 10,
    String? difficulty,
    String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallenges,
          [],
          {
            #page: page,
            #limit: limit,
            #difficulty: difficulty,
            #type: type,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<List<_i2.Challenge>>>.value(
            _FakeApiResponse_2<List<_i2.Challenge>>(
          this,
          Invocation.method(
            #getChallenges,
            [],
            {
              #page: page,
              #limit: limit,
              #difficulty: difficulty,
              #type: type,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.Challenge>>>);

  @override
  _i4.Future<void> joinChallenge(int? challengeId) => (super.noSuchMethod(
        Invocation.method(
          #joinChallenge,
          [challengeId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getChallengeLeaderboard(
    int? challengeId, {
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeLeaderboard,
          [challengeId],
          {#limit: limit},
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [CheckinApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckinApiService extends _i1.Mock implements _i3.CheckinApiService {
  MockCheckinApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Checkin>> getCheckins({
    int? page = 1,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCheckins,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i2.Checkin>>.value(<_i2.Checkin>[]),
      ) as _i4.Future<List<_i2.Checkin>>);

  @override
  _i4.Future<_i2.Checkin> createCheckin({
    required String? type,
    String? notes,
    String? mood,
    int? energy = 5,
    int? motivation = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCheckin,
          [],
          {
            #type: type,
            #notes: notes,
            #mood: mood,
            #energy: energy,
            #motivation: motivation,
          },
        ),
        returnValue: _i4.Future<_i2.Checkin>.value(_FakeCheckin_6(
          this,
          Invocation.method(
            #createCheckin,
            [],
            {
              #type: type,
              #notes: notes,
              #mood: mood,
              #energy: energy,
              #motivation: motivation,
            },
          ),
        )),
      ) as _i4.Future<_i2.Checkin>);

  @override
  _i4.Future<Map<String, bool>> getCheckinCalendar({
    int? year,
    int? month,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCheckinCalendar,
          [],
          {
            #year: year,
            #month: month,
          },
        ),
        returnValue: _i4.Future<Map<String, bool>>.value(<String, bool>{}),
      ) as _i4.Future<Map<String, bool>>);

  @override
  _i4.Future<Map<String, dynamic>> getCheckinStreak() => (super.noSuchMethod(
        Invocation.method(
          #getCheckinStreak,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getAchievements() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAchievements,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [NutritionApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNutritionApiService extends _i1.Mock
    implements _i3.NutritionApiService {
  MockNutritionApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> calculateNutrition({
    required String? foodName,
    required double? quantity,
    required String? unit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateNutrition,
          [],
          {
            #foodName: foodName,
            #quantity: quantity,
            #unit: unit,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> searchFoods(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFoods,
          [query],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<Map<String, dynamic>> getDailyIntake({String? date}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyIntake,
          [],
          {#date: date},
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.NutritionRecord> createNutritionRecord({
    required String? date,
    required String? mealType,
    required String? foodName,
    required double? quantity,
    required String? unit,
    String? notes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNutritionRecord,
          [],
          {
            #date: date,
            #mealType: mealType,
            #foodName: foodName,
            #quantity: quantity,
            #unit: unit,
            #notes: notes,
          },
        ),
        returnValue:
            _i4.Future<_i2.NutritionRecord>.value(_FakeNutritionRecord_7(
          this,
          Invocation.method(
            #createNutritionRecord,
            [],
            {
              #date: date,
              #mealType: mealType,
              #foodName: foodName,
              #quantity: quantity,
              #unit: unit,
              #notes: notes,
            },
          ),
        )),
      ) as _i4.Future<_i2.NutritionRecord>);

  @override
  _i4.Future<_i2.ApiResponse<List<_i2.NutritionRecord>>> getNutritionRecords({
    int? page = 1,
    int? limit = 20,
    String? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNutritionRecords,
          [],
          {
            #page: page,
            #limit: limit,
            #date: date,
          },
        ),
        returnValue:
            _i4.Future<_i2.ApiResponse<List<_i2.NutritionRecord>>>.value(
                _FakeApiResponse_2<List<_i2.NutritionRecord>>(
          this,
          Invocation.method(
            #getNutritionRecords,
            [],
            {
              #page: page,
              #limit: limit,
              #date: date,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<List<_i2.NutritionRecord>>>);
}
